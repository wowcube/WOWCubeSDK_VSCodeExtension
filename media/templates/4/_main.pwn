// This PAWN script is generated by WOWCube SDK project wizard

forward run(const pkt[], size, const src[]); // public Pawn function seen from C

// Includes
// -----------------------------

#include "cubios_abi.inc"
#include "trbl.inc"
#include "math.inc"
#include "run.inc"
#include "splashscreen.inc"

// Application defines
// -----------------------------
#define LEADERBOARD_SHOWN  0
#define GAME_SHOWN  1

// Application variables
// -----------------------------
new leadersTable[10][LEADER_DATA] = [
        ["ILYA",  943028],
        ["MAX",  453406],
        ["ROSY",  434330],
        ["VINCE", 334340],
        ["IVAN",  290664],
        ["ALEX",   245348],
        ["GLENN",  230452],
        ["DEAN",  158640],
        ["REY",   125986],
        ["EVGEN", 78678 ]
    ];

new resultsTable[4][RESULT_DATA] = [
        ["SCORE",     37244 ],
        ["MOVES",     92    ],
        ["BEST CHIP", 1024  ],
        ["RECORD",    843028]
    ];

// WOWCube application callbacks 
// -----------------------------
new previousTime = 0;
new currentTime = 0;
new deltaTime = 0;
new gameState = 0;

//Applicaton initialization callback. Called once when CUB application starts
ON_INIT()
{
    //initialize splash screen

    InitSplashScreenBasics(0xFFFFFF, 0xB3B6FF, 1);
    InitSplashScreen(leadersTable);
    InitSplashScreenResults(resultsTable);
}

//Main run loop callback. Gets called recurrently by the CUB application as frequent as application code allows. 
ONTICK()
{
    currentTime = abi_GetTime();
    deltaTime = currentTime - previousTime;
            
    // Detect shake and quit application
    if (0 == abi_cubeN) 
        {
        abi_checkShake();
        }

    previousTime = currentTime;
}

//This callback is gets called immediately after ONTICK(). Use it for calling your rendering code. 
RENDER()
{ 
    for (new screen = 0; screen < 3; ++screen) 
    {
        if(gameState==LEADERBOARD_SHOWN)
        {
             //render splash screens
             DrawSplashScreen(screen, "THE GAME", deltaTime);
        }
        else
        {
            //add your game rendering here
            abi_CMD_FILL(255,0,0);
        }

        //commit to screen buffer
        abi_CMD_REDRAW(screen);
    }     
}

//The "physics" callback. Gets called recurrently with 30ms resolution. 
ON_PHYSICS_TICK() 
{
}

//The "inner network" callback. Gets called when WOWCube module receives a data packet from other module
ON_CMD_NET_RX(const pkt[])
{
}

ON_LOAD_GAME_DATA()
{
}

//The cube topology change callback. Gets called when cube is twisted and its topological desctiption has been changed
ON_CHECK_ROTATE() 
{
    //when cube topology changes, game state is set
    gameState=GAME_SHOWN;
} 


// User-defined functions
// -----------------------------